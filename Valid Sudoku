class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        int [] check = new int[9];
        for(int e : check){
            e = 0;
        }
        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                
                if(board[i][j] != '.'){
                int ascii = (int)board[i][j];
                check[ascii-49] = check[ascii-49]+1;
                }
            }
            if(!isValid(check)){
                 return false;
            }

            for(int g = 0; g < 9; g++){
                check[g] = 0;
            }

        }

        for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                
                if(board[j][i] != '.'){
                int ascii = (int)board[j][i];
                check[ascii-49] = check[ascii-49]+1;
                }
            }
            if(!isValid(check)){
                 return false;
            }
            for(int g = 0; g < 9; g++){
                check[g] = 0;
            }
        }

        for(int i = 0; i < 9; i = i+3){
            for(int j = 0; j < 9; j = j+3){
                int ch = i+3;
                for(int k = i; k < ch; k++){
                    int hc = j+3;
                    for(int l = j; l < hc; l++){
                        System.out.println(k + "" + l);
                        if(board[k][l] != '.'){
                            int ascii = (int)board[k][l];
                            check[ascii-49] = check[ascii-49]+1;
                        }
                    }
                }
                if(!isValid(check)){
                 return false;
            }
            for(int g = 0; g < 9; g++){
                check[g] = 0;
            }
            }
        }

        return true;
    }

        

    public boolean isValid(int[] nums){

        for(int i : nums){
            if(i > 1) return false;
        }
        
        return true;
    }
}

