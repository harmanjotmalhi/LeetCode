/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        
        boolean result = false;

        if(root != null){
            System.out.println(root.val);
        }
        

        if(subRoot == null){
            if(root == null) {
            return true;
            }else if (root != null){
                return false;
            }
        }else if(root == null) {return result;}
        else if(root.val == subRoot.val){
            result = isSameTree(root,subRoot);
            System.out.println(result);
            if(!result)
        result = isSubtree(root.left,subRoot);
        if(!result){
        result = isSubtree(root.right,subRoot);
            }
            return result;
        }

        if(!result)
        result = isSubtree(root.left,subRoot);
        if(!result){
        result = isSubtree(root.right,subRoot);
        }

        return result;




    }

    public boolean isSameTree(TreeNode root, TreeNode subRoot){

        boolean re = true;
        if(root == null && subRoot != null || root != null && subRoot == null) {
        return false;
        }
        else if(root == null && subRoot == null ) return true;

        if(re){
        re = isSameTree(root.left,subRoot.left);
        if(root.val != subRoot.val) return false;
        }
        if(re){
        re = isSameTree(root.right,subRoot.right);
        if(root.val != subRoot.val) return false;
        }

        return re;

    }

}
