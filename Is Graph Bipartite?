class Solution {
    public boolean isBipartite(int[][] graph) {
        
        int[] visited = new int[graph.length];

        for(int i = 0; i < visited.length; i++){
            visited[i] = -1;
        }

        boolean result = true;
        for(int i = 0; i < visited.length; i++){
            if(visited[i] == -1){
                result = bfs(graph, visited, 0, i);
                if(!result) return result;
            }
        }

        return result;
    }

    public boolean bfs(int[][] graph, int[] colors, int color, int index){

        Queue<Integer> queue = new LinkedList<>();

        queue.add(index);
        int curr = color;
        colors[index] = curr;

        while(!queue.isEmpty()){
            int temp = queue.poll();
            curr = 1-curr;
            for(int i : graph[temp]){
                if(colors[i] == colors[temp]){
                    return false;
                }
                if(colors[i] == -1){
                    colors[i] = 1-colors[temp];
                    queue.add(i);
                }
            }
        }

        return true;
    }

    public boolean dfs(int[][] graph, int[] colors, int color, int index){

           colors[index] = color; 
        

        boolean result = true;
            for(int j = 0; j < graph[index].length; j++){
                int neighbor = graph[index][j];
                if(colors[neighbor] == color) return false;
                if(colors[neighbor] == -1){
                    if(color == 0){
                        result = dfs(graph, colors, 1, neighbor);
                    }
                    else if(color == 1){
                        result = dfs(graph, colors, 0, neighbor);
                    }
                }
            }
        

        return result;
    }
}
